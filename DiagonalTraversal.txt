//Here we are using the same approach as in vertical traversal, the right children are all considered in the same level and the left child at a higher level so each child is put in queue and taken out its children are explored the left child if exists is considered to be at a higher level then the right child so the height value stored with reference of node from the actual tree in a separate node is increased and for right child its kept the same and then that element which was popped is discarded and subsequent element in the queue is taken and above process is repeated.//
class Node:
    def __init__(self,key):
        self.right=None
        self.left=None
        self.val=key
def insert(root,data):
    if(root==None):
        root=None
    else:
        if(root.val<data):
            if(root.right==None):
                root.right=Node(data)
            else:
                insert(root.right,data)
        else:
            if(root.left==None):
                root.left=Node(data)
            else:
                insert(root.left,data)
arr=list(map(int,input().split()))
r=Node(arr[0])
for i in range(1,len(arr)):
    insert(r,arr[i])
class Obj:
    def __init__(self,nodevalue,height):
        self.node=nodevalue
        self.h=height
def DiagonalView(root):
    if(root==None):
        return
    table={}
    queue=[]
    queue.append(Obj(root,0))
    while(len(queue)>0):
        n=queue.pop(0)
        try:
            table[n.h].append(n.node)
        except:
            table[n.h]=[n.node]
        if(n.node.left!=None):
            queue.append(Obj(n.node.left,n.h+1))
        if(n.node.right!=None):
            queue.append(Obj(n.node.right,n.h))
    for index,value in enumerate(sorted(table)):
        print(value,end=":")
        for i in table[value]:
            print(i.val,end=" ")
        print()
DiagonalView(r)

            