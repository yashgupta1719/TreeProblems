When we print the inorder of a mirror image of tree it will always be the reverse of the actual tree when it is printed and so if we have a binary search tree and we do the inorder, and we get elements printed in ascending order so the mirror image of the tree when printed will give us descending order.
Code Reursion
class Node:
    def __init__(self,key):
        self.right=None
        self.left=None
        self.val=key
def insertNode(root,data):
    if(root==None):
        root=None
    else:
        if(root.val>=data):
            if(root.left==None):
                root.left=Node(data)
            else:
                insertNode(root.left,data)
        else:
            if(root.right==None):
                root.right=Node(data)
            else:
                insertNode(root.right,data)
arr=list(map(int,input().split()))
r=Node(arr[0])
for i in range(1,len(arr)):
    insertNode(r,arr[i])
def inorder(root):
    if(root):
        inorder(root.left)
        print(root.val)
        inorder(root.right)

def mirror(root):
    if(root==None):
        return
    else:
        if(root.right==None and root.left==None):
            return
        else:
            mirror(root.left)
            mirror(root.right)
            temp=root.left
            root.left=root.right
            root.right=temp
inorder(r)
print("The mirror image of the tree:")
mirror(r)
inorder(r)

