//Creating a class to create a special node for each node of the given tree which stores the actual reference of the node of the tree along with its distance from the root node so that by checking the distance we can place it in the list with proper index of the dictionary which is actually the distance itself.//
class Node:
    def __init__(self,key):
        self.right=None
        self.left=None
        self.val=key
def insertNode(root,data):
    if(root==None):
        root=None
    else:
        if(root.val<data):
            if(root.right==None):
                root.right=Node(data)
            else:
                insertNode(root.right,data)
        else:
            if(root.left==None):
                root.left=Node(data)
            else:
                insertNode(root.left,data)
arr=list(map(int,input().split()))
r=Node(arr[0])
for i in range(1,len(arr)):
    insertNode(r,arr[i])
class Obj:
    def __init__(self,nodes,value):
        self.node=nodes
        self.dis=value
def TopTraversal(root):
    if(root==None):
        return
    table={}
    queue=[]
    queue.append(Obj(root,0))
    while(len(queue)>0):
        ele=queue.pop(0)
        try:
            table[ele.dis].append(ele.node)
        except:
            table[ele.dis]=[ele.node]
        if(ele.node.left!=None):
            queue.append(Obj(ele.node.left,ele.dis-1))
        if(ele.node.right!=None):
            queue.append(Obj(ele.node.right,ele.dis+1))
    topview=[]
    for index,value in enumerate(sorted(table)):
        print(value,end=": ")
        for i in table[value]:
            
            print(i.val,end=" ")
        print()
TopTraversal(r)

    
                
            