class Node:
    def __init__(self,key):
        self.right=None
        self.left=None
        self.val=key
def insertNode(root,data):
    if(root==None):
        root=None
    else:
        if(root.val>=data):
            if(root.left==None):
                root.left=Node(data)
            else:
                insertNode(root.left,data)
        else:
            if(root.right==None):
                root.right=Node(data)
            else:
                insertNode(root.right,data)
arr=list(map(int,input().split()))
r=Node(arr[0])
for i in range(1,len(arr)):
    insertNode(r,arr[i])
def inorder(root):
    if(root):
        inorder(root.left)
        print(root.val)
        inorder(root.right)

def leftPrint(root):
    if(root==None):
        return
    else:
        if(root.right==None and root.left==None):
            return
        else:
            print(root.val)
            leftPrint(root.left)
def leafPrint(root):
    if(root==None):
        return
    else:
        if(root.right==None and root.left==None):
            print(root.val)
        leafPrint(root.left)
        leafPrint(root.right)
def rightPrint(root):
    if(root==None):
        return
    else:
        if(root.right==None and root.left==None):
            return
        else:
            rightPrint(root.right)
            print(root.val)
def BoundaryTraversal(root):
    if(root==None):
        return
    else:
        leftPrint(root)
        leafPrint(root)
        rightPrint(root.right)
BoundaryTraversal(r)
